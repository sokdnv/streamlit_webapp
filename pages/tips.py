import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from io import BytesIO
import plotly.express as px
import matplotlib.dates as mpl_dates

plt.style.use('https://github.com/dhaitz/matplotlib-stylesheets/raw/master/pitayasmoothie-dark.mplstyle')

# –ù–∞–∑–≤–∞–Ω–∏–µ
st.header('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —á–∞–µ–≤—ã–º')
st.divider()
st.page_link('main.py', label='–ù–∞ –≥–ª–∞–≤–Ω—É—é', icon='üîô')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
if 'tips' not in st.session_state:
    st.session_state.tips = None

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
data = st.sidebar.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å —á–∞–µ–≤—ã–º–∏', type='csv')
button = st.sidebar.button('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º')

if data:
    st.session_state.tips = pd.read_csv(data)
elif button:
    st.session_state.tips = pd.read_csv("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv")

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
tips = st.session_state.tips

if tips is not None:
    # –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
    choice = st.sidebar.toggle('–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º')

    if choice:
        st.sidebar.write(tips)

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    if 'time_order' not in tips.columns:
        start_date = np.datetime64('2023-01-01')
        end_date = np.datetime64('2023-01-31')

        random_dates = start_date + np.random.randint(0, (end_date - start_date).astype('timedelta64[D]').astype(int) + 1,
                                                      len(tips))

        random_hours = np.random.randint(9, 23, len(tips))
        random_minutes = np.random.randint(0, 60, len(tips))

        tips['time_order'] = [date + np.timedelta64(hour, 'h') + np.timedelta64(minute, 'm')
                              for date, hour, minute in zip(random_dates, random_hours, random_minutes)]

    tips['tip %'] = tips['tip'] / tips['total_bill']
    tips['date_only'] = tips['time_order'].dt.date

    tips['day_of_week'] = tips['time_order'].dt.day_name()
    days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    tips['day_of_week'] = pd.Categorical(tips['day_of_week'], categories=days_order, ordered=True)

    tips['time_only'] = tips['time_order'].dt.time

    def time_classificator(time):
        if 9 <= time.hour < 12:
            return "breakfast"
        elif 12 <= time.hour < 16:
            return "lunch"
        elif 16 <= time.hour < 23:
            return "dinner"


    tips['time_class'] = tips['time_only'].apply(time_classificator)

    tips_lunch = tips[tips['time_class'] == 'lunch']
    tips_dinner = tips[tips['time_class'] == 'dinner']

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    def create_plot(title, xlabel, ylabel, plot_func, filename, *args, **kwargs):
        fig, ax = plt.subplots(figsize=(10, 6))
        plot_func(*args, **kwargs, ax=ax)
        ax.set(title=title, xlabel=xlabel, ylabel=ylabel)
        buf = BytesIO()
        fig.savefig(buf, format="png")
        buf.seek(0)
        st.pyplot(fig)
        st.download_button(label=f"–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫: {title}", data=buf, file_name=f"{filename}.png", mime="image/png")
        st.divider()

    plot = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫', ['–î–∏–Ω–∞–º–∏–∫–∞ —á–∞–µ–≤—ã—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–∏',
                            '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤',
                            '–°–≤—è–∑—å –º–µ–∂–¥—É —á–µ–∫–æ–º –∏ —Å—É–º–º–æ–π —á–∞–µ–≤—ã—Ö',
                            '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏',
                            '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã —á–µ–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏',
                            '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –Ω–∞ –æ–±–µ–¥ –∏ –ª–∞–Ω—á',
                            '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –ø–æ –ø–æ–ª—É –∏ –∫—É—Ä–µ–Ω–∏—é'])

    if plot == '–î–∏–Ω–∞–º–∏–∫–∞ —á–∞–µ–≤—ã—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–∏':
        # –ì—Ä–∞—Ñ–∏–∫ 1: –î–∏–Ω–∞–º–∏–∫–∞ —á–∞–µ–≤—ã—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        st.subheader('–î–∏–Ω–∞–º–∏–∫–∞ —á–∞–µ–≤—ã—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–∏')
        def plot_tip_dynamics(data, x, y, ax):
            sns.lineplot(data=data, x=x, y=y, ax=ax)
            ax.xaxis.set_major_formatter(mpl_dates.DateFormatter('%d/%m'))

        create_plot(
            title='–î–∏–Ω–∞–º–∏–∫–∞ —á–∞–µ–≤—ã—Ö',
            xlabel='Date',
            ylabel='Tip %',
            plot_func=plot_tip_dynamics,
            filename='tip_dynamics',
            data=tips, x='date_only', y='tip %'
        )

    elif plot == '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤':
        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤
        st.subheader('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤')
        create_plot(
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤',
            xlabel='',
            ylabel='–°—É–º–º–∞',
            plot_func=sns.histplot,
            filename='bill_distribution',
            data=tips, x='total_bill'
        )

    elif plot == '–°–≤—è–∑—å –º–µ–∂–¥—É —á–µ–∫–æ–º –∏ —Å—É–º–º–æ–π —á–∞–µ–≤—ã—Ö':
        # –ì—Ä–∞—Ñ–∏–∫ 3: –°–≤—è–∑—å –º–µ–∂–¥—É —á–µ–∫–æ–º –∏ —Å—É–º–º–æ–π —á–∞–µ–≤—ã—Ö
        st.subheader('–°–≤—è–∑—å –º–µ–∂–¥—É —á–µ–∫–æ–º –∏ —Å—É–º–º–æ–π —á–∞–µ–≤—ã—Ö')
        create_plot(
            title='–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —á–∞–µ–≤—ã—Ö –æ—Ç —á–µ–∫–∞',
            xlabel='–°—É–º–º–∞ —á–µ–∫–∞',
            ylabel='–ß–∞–µ–≤—ã–µ',
            plot_func=sns.scatterplot,
            filename='tips_vs_bill',
            data=tips, x='total_bill', y='tip', size='tip %', sizes=(10, 100), legend=False
        )

    # –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    elif plot == '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏':
        st.subheader('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
        create_plot(
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ % —á–∞–µ–≤—ã—Ö –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏',
            xlabel='% —á–∞–µ–≤—ã—Ö',
            ylabel='',
            plot_func=sns.scatterplot,
            filename='tips_by_weekday',
            data=tips, y='day_of_week', x='tip %', hue='sex', palette={'Female': 'r', 'Male': 'b'}
        )

    elif plot == '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã —á–µ–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏':
        # –ì—Ä–∞—Ñ–∏–∫ 5: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã —á–µ–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
        st.subheader('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã —á–µ–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏')
        create_plot(
            title='–°—á–µ—Ç–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏',
            xlabel='',
            ylabel='–°—É–º–º–∞ —á–µ–∫–∞',
            plot_func=sns.boxplot,
            filename='bills_by_weekday',
            data=tips, x='day_of_week', y='total_bill', hue='time_class', hue_order=['breakfast', 'lunch', 'dinner']
        )

    # –ì—Ä–∞—Ñ–∏–∫ 6: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –Ω–∞ –æ–±–µ–¥ –∏ –ª–∞–Ω—á
    elif plot == '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –Ω–∞ –æ–±–µ–¥ –∏ –ª–∞–Ω—á':
        st.subheader('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –Ω–∞ –æ–±–µ–¥ –∏ –ª–∞–Ω—á')

        fig_lunch = px.histogram(tips_lunch, x='tip %', title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –≤–æ –≤—Ä–µ–º—è –ª–∞–Ω—á–∞')
        fig_dinner = px.histogram(tips_dinner, x='tip %', title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –≤–æ –≤—Ä–µ–º—è –æ–±–µ–¥–∞')

        fig_lunch.update_layout(xaxis_title='% —á–∞–µ–≤—ã—Ö', yaxis_title='')
        fig_dinner.update_layout(xaxis_title='% —á–∞–µ–≤—ã—Ö', yaxis_title='')

        st.plotly_chart(fig_lunch)
        st.plotly_chart(fig_dinner)
        st.divider()

    # –ì—Ä–∞—Ñ–∏–∫ 7: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –ø–æ –ø–æ–ª—É –∏ –∫—É—Ä–µ–Ω–∏—é
    elif plot == '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –ø–æ –ø–æ–ª—É –∏ –∫—É—Ä–µ–Ω–∏—é':
        st.subheader('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –ø–æ –ø–æ–ª—É –∏ –∫—É—Ä–µ–Ω–∏—é')
        fig_male = px.scatter(tips[tips['sex'] == 'Male'], x='total_bill', y='tip', color='smoker',
                              title='–ß–∞–µ–≤—ã–µ –æ—Ç –º—É–∂—á–∏–Ω', labels={'total_bill': '–ß–µ–∫', 'tip': '–ß–∞–µ–≤—ã–µ'})
        fig_female = px.scatter(tips[tips['sex'] == 'Female'], x='total_bill', y='tip', color='smoker',
                                title='–ß–∞–µ–≤—ã–µ –æ—Ç –∂–µ–Ω—â–∏–Ω', labels={'total_bill': '–ß–µ–∫', 'tip': '–ß–∞–µ–≤—ã–µ'})

        st.plotly_chart(fig_male)
        st.plotly_chart(fig_female)

else:
    st.subheader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
